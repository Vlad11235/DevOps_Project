#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("create docker image") {
            steps {
                echo "============== start building image =================="
                sh "ls -la ${pwd()}"
                dir ('docker') {
                	sh 'docker build -t blog:latest . '
                    
                }
            }
        }

        stage("Deploy") {
            steps {
                echo "============== Start Deploy  =================="
                script{
                 try {
                            sh "curl -Is http://blog-blog1.apps.us-west-2.online-starter.openshift.com/login | grep '200'"  
                            sh "oc login --token=8rjn6F4g9zBO_KFHUWTmCG0XplLC1CRyGS8fc8o9-_o --server=https://api.us-west-2.online-starter.openshift.com:6443"
                            sh "oc delete pods,services,deploymentconfigs --all"
                      } catch (Exception e) {
                                return true
                          }
                }
            
                sh "docker push jake1788/blog:latest"

                sh "oc login --token=8rjn6F4g9zBO_KFHUWTmCG0XplLC1CRyGS8fc8o9-_o --server=https://api.us-west-2.online-starter.openshift.com:6443"
                
                sh "oc new-app jake1788/blog:latest" 

                sh "oc expose svc blog"

                sh "oc status"

                
                echo "============== Deploy Finished ==============="
                
            }
        }
         stage("Test") {
                steps {
                  echo "============== start testing =================="

                   script{  
                       waitUntil{
                        try {
                                sh "curl -Is http://blog-blog1.apps.us-west-2.online-starter.openshift.com/login | grep '200'"
                                
                            return true 
                          } catch (Exception e) {
                                sleep(10)
                                return false
                          }
                       }
                    }
                   
                   echo "============== Test Finished =================="
           }

        }
      
               
            

    }
    
        

       
}
